using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;

// Using Custom Library
using InventoryManagementEntityLayer;

namespace InventoryManagementDataLayer
{
    public static class CreateData
    {
        /// <summary>
        /// This function receives a user profile object to insert its respective data into the database for prosperity
        /// </summary>
        /// <param name="newUser">The user object that stores the necessary data to create a new profile</param>
        /// <returns>A message that confirms or rejects the user profile creation process</returns>
        public static String CreateNewUserProfileData(UserProfile newUser)
        {
            // Define which query command will be executed 
            SqlCommand cmd = new SqlCommand(
                    "SP_Create_New_User", // Stored procedure dedicated to insert new data
                    DatabaseManager.ActiveSqlConnection); // requesting an open active connection to the database from the manager 
            cmd.CommandType = CommandType.StoredProcedure; // Confirming that the previous command is a recognized stored procedure within the database

            #region Parameters
            // Declaring the parameters required by the stored procedure to execute it's pre defined command
            cmd.Parameters.Add("@username", SqlDbType.VarChar, 50).Value = newUser.Username; // variable to define the username
            cmd.Parameters.Add("@password", SqlDbType.VarChar, 30).Value = newUser.Password; // defining the password
            cmd.Parameters.Add("@first_name", SqlDbType.VarChar, 100).Value = newUser.FirstName; // variable indicating the new user's first name
            cmd.Parameters.Add("@last_name", SqlDbType.VarChar, 100).Value = newUser.LastName; // variable indicating the new user's last name
            cmd.Parameters.Add("@role", SqlDbType.VarChar, 100).Value = newUser.Role; // defining the level of acces the new user is granted
            cmd.Parameters.Add("@creator", SqlDbType.VarChar, 50).Value = newUser.Creator; // variable to indicate the user that created this new profile

            // Declaring an output variable
            SqlParameter message = new SqlParameter("@message", SqlDbType.VarChar, 300); // defining the output message variable
            message.Direction = ParameterDirection.Output; // Confirming the output direction
            cmd.Parameters.Add(message); // Adding output paramater to the command
            #endregion

            Int32 reply;
            reply = Convert.ToInt32(cmd.ExecuteNonQuery()); // executing the stored procedure

            // closing the opened database connection is ignored given an expected output, @message, will be used

            return cmd.Parameters["@message"].Value.ToString(); // returning the output message generated by the procedure
        }

        /// <summary>
        /// This function receives a product object to insert its data into the database
        /// </summary>
        /// <param name="product">Product object which contains necessary information</param>
        /// <returns>A message that confirms or denies the creation process</returns>
        public static String RegisterNewProductData(Product product)
        {
            // Define which query command will be executed 
            SqlCommand cmd = new SqlCommand(
                    "SP_Register_New_Product", // Stored procedure dedicated to insert new data
                    DatabaseManager.ActiveSqlConnection); // requesting an open active connection to the database from the manager 
            cmd.CommandType = CommandType.StoredProcedure; // Confirming that the previous command is a recognized stored procedure within the database

            #region Parameters
            // Declaring the parameters required by the stored procedure to execute it's pre defined command
            cmd.Parameters.Add("@key", SqlDbType.VarChar, 100).Value = product.Key;
            cmd.Parameters.Add("@name", SqlDbType.VarChar, 300).Value = product.Name;
            cmd.Parameters.Add("@brand", SqlDbType.VarChar, 100).Value = product.Brand == "<None>" ? "" : product.Brand;
            cmd.Parameters.Add("@supplier", SqlDbType.VarChar, 100).Value = product.Supplier == "<None>" ? "" : product.Supplier;
            cmd.Parameters.Add("@unit", SqlDbType.VarChar, 30).Value = product.Unit;
            cmd.Parameters.Add("@category", SqlDbType.VarChar, 50).Value = product.Category;
            cmd.Parameters.Add("@type", SqlDbType.VarChar, 50).Value = product.Type;
            cmd.Parameters.Add("@cost", SqlDbType.Decimal).Value = product.UnitCost;
            cmd.Parameters.Add("@price", SqlDbType.Decimal).Value = product.UnitPrice;
            cmd.Parameters.Add("@quantity", SqlDbType.Int).Value = product.Quantity;
            cmd.Parameters.Add("@minimum", SqlDbType.Int).Value = product.MinimumQuantity;
            cmd.Parameters.Add("@maximum", SqlDbType.Int).Value = product.MaximumQuantity;
            cmd.Parameters.Add("@username", SqlDbType.VarChar, 50).Value = product.RegisteredBy;

            // Declaring an output variable
            SqlParameter message = new SqlParameter("@message", SqlDbType.VarChar, 300); // defining the output message variable
            message.Direction = ParameterDirection.Output; // Confirming the output direction
            cmd.Parameters.Add(message); // Adding output paramater to the command
            #endregion

            Int32 reply;
            reply = Convert.ToInt32(cmd.ExecuteNonQuery()); // executing the stored procedure

            // closing the opened database connection is ignored given an expected output, @message, will be used

            return cmd.Parameters["@message"].Value.ToString(); // returning the output message generated by the procedure
        }

        /// <summary>
        /// This function registers new product brands
        /// </summary>
        /// <param name="name">Name of product brand</param>
        /// <returns>A message that confirms or rejects the brand creation process</returns>
        public static String RegisterNewProductBrandData(String name)
        {
            // Define which query command will be executed 
            SqlCommand cmd = new SqlCommand(
                    "SP_Register_New_Brand", // Stored procedure dedicated to insert new data
                    DatabaseManager.ActiveSqlConnection); // requesting an open active connection to the database from the manager 
            cmd.CommandType = CommandType.StoredProcedure; // Confirming that the previous command is a recognized stored procedure within the database

            #region Parameters
            // Declaring an output variable
            cmd.Parameters.Add("@name", SqlDbType.VarChar, 100).Value = name; // Defining the brand name

            // Declaring an output variable
            SqlParameter message = new SqlParameter("@message", SqlDbType.VarChar, 300); // defining the output message variable
            message.Direction = ParameterDirection.Output; // Confirming the output direction
            cmd.Parameters.Add(message); // Adding output paramater to the command
            #endregion

            Int32 reply;
            reply = Convert.ToInt32(cmd.ExecuteNonQuery()); // executing the stored procedure

            // closing the opened database connection is ignored given an expected output, @message, will be used

            return cmd.Parameters["@message"].Value.ToString(); // returning the output message generated by the procedure
        }

        /// <summary>
        /// This function registers new product suppliers
        /// </summary>
        /// <param name="name">Name of product supplier</param>
        /// <param name="phoneNumber">Phone number of supplier</param>
        /// <param name="email">email of supplier</param>
        /// <returns>A message that confirms or rejects the supplier creation process</returns>
        public static String RegisterNewProductSupplierData(String name, String phoneNumber, String email)
        {
            // Define which query command will be executed 
            SqlCommand cmd = new SqlCommand(
                    "SP_Register_New_Supplier", // Stored procedure dedicated to insert new data
                    DatabaseManager.ActiveSqlConnection); // requesting an open active connection to the database from the manager
            cmd.CommandType = CommandType.StoredProcedure; // Confirming that the previous command is a recognized stored procedure within the database

            #region Parameters
            // Declaring an output variable
            cmd.Parameters.Add("@name", SqlDbType.VarChar, 100).Value = name; // Defining the supplier name
            cmd.Parameters.Add("@phone_number", SqlDbType.VarChar, 100).Value = phoneNumber; // defining the phone number
            cmd.Parameters.Add("@email", SqlDbType.VarChar, 200).Value = email; // defining supplier's email

            // Declaring an output variable
            SqlParameter message = new SqlParameter("@message", SqlDbType.VarChar, 300); // defining the output message variable
            message.Direction = ParameterDirection.Output; // Confirming the output direction
            cmd.Parameters.Add(message); // Adding output paramater to the command
            #endregion

            Int32 reply;
            reply = Convert.ToInt32(cmd.ExecuteNonQuery()); // executing the stored procedure

            // closing the opened database connection is ignored given an expected output, @message, will be used

            return cmd.Parameters["@message"].Value.ToString(); // returning the output message generated by the procedure
        }

        /// <summary>
        /// This function receives an activity object to register a system or user activity
        /// </summary>
        /// <param name="activity">Activity object containing the assigned information for creation</param>
        public static void RegisterNewUserActivityData(Activity activity)
        {
            // Define which query command will be executed 
            SqlCommand cmd = new SqlCommand(
                    "SP_Register_New_Activity", // Stored procedure dedicated to insert new activity data
                    DatabaseManager.ActiveSqlConnection); // requesting an open active connection to the database from the manager 
            cmd.CommandType = CommandType.StoredProcedure; // Confirming that the previous command is a recognized stored procedure within the database

            #region Parameters
            // Declaring the parameters required by the stored procedure to execute it's pre defined command
            cmd.Parameters.Add("@username", SqlDbType.VarChar, 50).Value = activity.Username; // variable to define the username currently in session
            cmd.Parameters.Add("@description", SqlDbType.VarChar, 300).Value = activity.Description; // defining the description of the activity
            cmd.Parameters.Add("@type", SqlDbType.VarChar, 100).Value = activity.Type; // defining the type of activity
            #endregion

            Int32 reply;
            reply = Convert.ToInt32(cmd.ExecuteNonQuery()); // executing the stored procedure

            DatabaseManager.DisconnectToDatabase(); // Closing connection with database
        }
    }
}
